## Документация на уеб-базирана система за ресторант "Liora"

### 1. Въведение

"Liora" е уеб-базирана система за управление на ресторант, разработена с цел да дигитализира и улесни основни процеси като резервации, поръчки, управление на меню, потребителски профили и отчетност. Проектът е реализиран чрез ASP.NET MVC и използва C# за сървърната логика, Entity Framework за достъп до базата данни и клиентски технологии като HTML, CSS, JavaScript и Bootstrap за изграждане на потребителския интерфейс.

Системата предлага различни нива на достъп в зависимост от ролята на потребителя: клиент, персонал или администратор.

### 2. Цели и обхват

* Предоставяне на удобен интерфейс за клиенти за извършване на онлайн резервации и поръчки.
* Улесняване на работата на персонала чрез централизирано управление на поръчки и резервации.
* Подпомагане на административния екип чрез визуализация на отчетни данни и възможност за управление на съдържанието и потребителите.

### 3. Функционалности на системата

#### 3.1 Клиентски функционалности

* Регистрация и вход в потребителски профил.
* Преглед на главна страница със снимки и приветствено съдържание.
* Разглеждане на пълно меню със система от модални прозорци за подробности.
* Преглед на специални предложения (сезонни или намалени артикули).
* Създаване на резервации чрез модален прозорец с филтри по дата, час, хора и продължителност.
* Предварително попълнени лични данни за по-лесно попълване на форми.
* Добавяне на артикули в кошница, промяна на количество, премахване.
* Финализиране на поръчка и получаване на потвърждение.
* Преглед на историята на поръчки и резервации с възможност за отмяна.
* Редакция на потребителски данни и парола.
* Изход от системата чрез премахване на сесия и бисквитки.

#### 3.2 Функционалности за персонал

* Табло с важна информация.
* Страница с активни поръчки на потребители с възможност за преглед и редакция на статуси.
* Аналогична страница за резервации.

#### 3.3 Административни функционалности

* Достъп до административно табло.
* Управление на меню: добавяне, редактиране, премахване на артикули.
* Управление на специални предложения.
* Преглед и редакция на всички поръчки и резервации.
* Отчетни страници с приходи и заетост по дни, седмици, месеци и години.
* Генериране на статистики за най-поръчвани продукти.
* Управление на потребители и персонал.

### 4. Архитектура на системата

Системата е изградена по модела MVC (Model-View-Controller), който разделя логиката, потребителския интерфейс и данните в отделни компоненти.

* **Model** – представя бизнес логиката и структурата на данните (напр. потребители, поръчки, ястия).
* **View** – визуализира интерфейса, използвайки Razor и HTML шаблони.
* **Controller** – управлява заявките и координира взаимодействието между моделите и изгледите.

### 5. База данни

Използвана е релационна база от данни, създадена чрез Entity Framework. Основни таблици:

* Users (потребители с роля)
* MenuItems (продукти от менюто)
* SpecialOffers
* Orders
* OrderItems (релация много към много между поръчки и ястия)
* Reservations

Всяка таблица има първичен ключ, съответни чужди ключове и подходящи ограничения за валидност.

### 6. Интерфейси

#### 6.1 Потребителски интерфейс

* Достъпен без вход: начална страница, меню, специални предложения.
* След вход: допълнителен достъп до резервации, поръчки, личен профил.
* Удобна навигация и responsive дизайн, подходящ за мобилни устройства.

#### 6.2 Интерфейс за персонал

* Фокусира се върху активни резервации и поръчки.
* Възможност за смяна на статуси и преглед на клиентски заявки.

#### 6.3 Административен интерфейс

* Разширено табло с ключова информация.
* Достъп до всички модули: меню, оферти, потребители, отчети.
* Само администратори имат достъп чрез ролево базирана защита.

### 7. Защита и достъп

* Реализирана автентикация и авторизация на базата на роли.
* Защитен достъп до контролери и изгледи чрез `Authorize` атрибути.
* Валидиране на формите чрез ASP.NET Unobtrusive Validation.
* Защита срещу директен достъп чрез URL без сесия или роля.

### 8. Тестване и валидация

* Ръчно тестване на всички основни потоци: регистрация, вход, поръчка, резервация, изход.
* Проверка на форми за невалидни входни данни.
* Тестване на ограниченията по дати и часове при резервация.

### 9. Бъдещи подобрения

* Добавяне на отделен панел за кухнята.
* Подобряване на дизайна за по-модерен потребителски опит.
* Имплементиране на автоматични напомняния за резервации.
* Добавяне на възможност за плащане онлайн.

### 10. Заключение

Проектът "Liora" успешно реализира основните цели, зададени в техническото задание: предоставяне на уеб платформа за управление на ресторант чрез интуитивен и функционален интерфейс, ролева структура и базирана на данни отчетност. Системата може лесно да бъде надградена с нови модули и подобрения, съобразени с нуждите на реален ресторантски бизнес.
